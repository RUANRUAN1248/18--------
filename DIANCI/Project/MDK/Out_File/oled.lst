C251 COMPILER V5.60.0,  oled                                                               09/06/23  13:14:13  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE oled
OBJECT MODULE PLACED IN .\Out_File\oled.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE ..\USER\src\oled.c XSMALL WARNINGLEVEL(3) BROWSE INCDIR(..\..\Librarie
                    -s\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src;..\..
                    -\..\DIANCI) DEBUG PRINT(.\Out_File\oled.lst) TABS(2) OBJECT(.\Out_File\oled.obj) 

stmt  level    source

    1          #include "oled.h"
    2          #include "stdlib.h"
    3          #include "oledfont.h"    
    4          
    5          
    6          uint8 OLED_GRAM[144][8]={0};
    7          
    8          //反显函数
    9          void OLED_ColorTurn(uint8 i)
   10          {
   11   1        if(i==0)
   12   1          {
   13   2            OLED_WR_Byte(0xA6,OLED_CMD);//正常显示
   14   2          }
   15   1        if(i==1)
   16   1          {
   17   2            OLED_WR_Byte(0xA7,OLED_CMD);//反色显示
   18   2          }
   19   1      }
   20          
   21          //屏幕旋转180度
   22          void OLED_DisplayTurn(uint8 i)
   23          {
   24   1        if(i==0)
   25   1          {
   26   2            OLED_WR_Byte(0xC8,OLED_CMD);//正常显示
   27   2            OLED_WR_Byte(0xA1,OLED_CMD);
   28   2          }
   29   1        if(i==1)
   30   1          {
   31   2            OLED_WR_Byte(0xC0,OLED_CMD);//反转显示
   32   2            OLED_WR_Byte(0xA0,OLED_CMD);
   33   2          }
   34   1      }
   35          
   36          
   37          void OLED_WR_Byte(uint8 dat,uint8 cmd)
   38          { 
   39   1        //uint8 i;        
   40   1        if(cmd)
   41   1          OLED_DC_Set();
   42   1        else
   43   1          OLED_DC_Clr();
   44   1        OLED_CS_Clr();
   45   1        spi_mosi(dat);      
   46   1        OLED_CS_Set();
   47   1        OLED_DC_Set();      
   48   1      }
   49          
   50          //开启OLED显示 
   51          void OLED_DisPlay_On(void)
   52          {
   53   1        OLED_WR_Byte(0x8D,OLED_CMD);//电荷泵使能
   54   1        OLED_WR_Byte(0x14,OLED_CMD);//开启电荷泵
   55   1        OLED_WR_Byte(0xAF,OLED_CMD);//点亮屏幕
   56   1      }
   57          
C251 COMPILER V5.60.0,  oled                                                               09/06/23  13:14:13  PAGE 2   

   58          //关闭OLED显示 
   59          void OLED_DisPlay_Off(void)
   60          {
   61   1        OLED_WR_Byte(0x8D,OLED_CMD);//电荷泵使能
   62   1        OLED_WR_Byte(0x10,OLED_CMD);//关闭电荷泵
   63   1        OLED_WR_Byte(0xAF,OLED_CMD);//关闭屏幕
   64   1      }
   65          
   66          //更新显存到OLED  
   67          void OLED_Refresh(void)
   68          {
   69   1        uint8 i,n;
   70   1        for(i=0;i<8;i++)
   71   1        {
   72   2        
   73   2           OLED_WR_Byte((uint8)(0xb0+i),OLED_CMD); //设置行起始地址
   74   2           OLED_WR_Byte(0x00,OLED_CMD);   //设置低列起始地址
   75   2           OLED_WR_Byte(0x10,OLED_CMD);   //设置高列起始地址
   76   2           for(n=0;n<128;n++)
   77   2           OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
   78   2        }
   79   1      }
   80          //清屏函数
   81          void OLED_Clear(void)
   82          {
   83   1        uint8 i,n;
   84   1        for(i=0;i<8;i++)
   85   1        {
   86   2           for(n=0;n<128;n++)
   87   2            {
   88   3             OLED_GRAM[n][i]=0;//清除所有数据
   89   3            }
   90   2        }
   91   1        OLED_Refresh();//更新显示
   92   1      }
   93          
   94          //画点 
   95          //x:0~127
   96          //y:0~63
   97          void OLED_DrawPoint(uint8 x,uint8 y)
   98          {
   99   1        uint8 i,m,n;
  100   1        i=y/8;
  101   1        m=y%8;
  102   1        n=1<<m;
  103   1        OLED_GRAM[x][i]|=n;
  104   1      }
  105          
  106          //清除一个点
  107          //x:0~127
  108          //y:0~63
  109          void OLED_ClearPoint(uint8 x,uint8 y)
  110          {
  111   1        uint8 i,m,n;
  112   1        i=y/8;
  113   1        m=y%8;
  114   1        n=1<<m;
  115   1        OLED_GRAM[x][i]=~OLED_GRAM[x][i];
  116   1        OLED_GRAM[x][i]|=n;
  117   1        OLED_GRAM[x][i]=~OLED_GRAM[x][i];
  118   1      }
  119          
  120          
  121          //画线
  122          //x:0~128
  123          //y:0~64
C251 COMPILER V5.60.0,  oled                                                               09/06/23  13:14:13  PAGE 3   

  124          //void OLED_DrawLine(uint8 x1,uint8 y1,uint8 x2,uint8 y2)
  125          //{
  126          //  uint8 i,k,k1,k2,y0;
  127          //  if((x1<0)||(x2>128)||(y1<0)||(y2>64)||(x1>x2)||(y1>y2))return;
  128          //  if(x1==x2)    //画竖线
  129          //  {
  130          //      for(i=0;i<(y2-y1);i++)
  131          //      {
  132          //        OLED_DrawPoint(x1,y1+i);
  133          //      }
  134          //  }
  135          //  else if(y1==y2)   //画横线
  136          //  {
  137          //      for(i=0;i<(x2-x1);i++)
  138          //      {
  139          //        OLED_DrawPoint(x1+i,y1);
  140          //      }
  141          //  }
  142          //  else      //画斜线
  143          //  {
  144          //    k1=y2-y1;
  145          //    k2=x2-x1;
  146          //    k=k1*10/k2;
  147          //    for(i=0;i<(x2-x1);i++)
  148          //      {
  149          //        OLED_DrawPoint(x1+i,y1+i*k/10);
  150          //      }
  151          //  }
  152          //}
  153          //x,y:圆心坐标
  154          //r:圆的半径
  155          //void OLED_DrawCircle(uint8 x,uint8 y,uint8 r)
  156          //{
  157          //  int a, b,num;
  158          //    a = 0;
  159          //    b = r;
  160          //    while(2 * b * b >= r * r)      
  161          //    {
  162          //        OLED_DrawPoint(x + a, y - b);
  163          //        OLED_DrawPoint(x - a, y - b);
  164          //        OLED_DrawPoint(x - a, y + b);
  165          //        OLED_DrawPoint(x + a, y + b);
  166          // 
  167          //        OLED_DrawPoint(x + b, y + a);
  168          //        OLED_DrawPoint(x + b, y - a);
  169          //        OLED_DrawPoint(x - b, y - a);
  170          //        OLED_DrawPoint(x - b, y + a);
  171          //        
  172          //        a++;
  173          //        num = (a * a + b * b) - r*r;//计算画的点离圆心的距离
  174          //        if(num > 0)
  175          //        {
  176          //            b--;
  177          //            a--;
  178          //        }
  179          //    }
  180          //}
  181          
  182          
  183          
  184          //在指定位置显示一个字符,包括部分字符
  185          //x:0~127
  186          //y:0~63
  187          //size:选择字体 12/16/24
  188          //取模方式 逐列式
  189          void OLED_ShowChar(uint8 x,uint8 y,uint8 chr,uint8 size1)
C251 COMPILER V5.60.0,  oled                                                               09/06/23  13:14:13  PAGE 4   

  190          {
  191   1        uint8 i,m,temp,size2,chr1;
  192   1        uint8 y0=y;
  193   1        size2=(size1/8+((size1%8)?1:0))*(size1/2);  //得到字体一个字符对应点阵集所占的字节数
  194   1        chr1=chr-' ';  //计算偏移后的值
  195   1        for(i=0;i<size2;i++)
  196   1        {
  197   2          if(size1==12)
  198   2              {temp=asc2_1206[chr1][i];} //调用1206字体
  199   2          else if(size1==16)
  200   2              {temp=asc2_1608[chr1][i];} //调用1608字体
  201   2          else if(size1==24)
  202   2              {temp=asc2_2412[chr1][i];} //调用2412字体
  203   2          else return;
  204   2              for(m=0;m<8;m++)           //写入数据
  205   2              {
  206   3                if(temp&0x80)OLED_DrawPoint(x,y);
  207   3                else OLED_ClearPoint(x,y);
  208   3                temp<<=1;
  209   3                y++;
  210   3                if((y-y0)==size1)
  211   3                {
  212   4                  y=y0;
  213   4                  x++;
  214   4                  break;
  215   4                }
  216   3              }
  217   2        }
  218   1      }
  219          
  220          
  221          //显示字符串
  222          //x,y:起点坐标  
  223          //size1:字体大小 
  224          //*chr:字符串起始地址 
  225          void OLED_ShowString(uint8 x,uint8 y,uint8 *chr,uint8 size1)
  226          {
  227   1        while((*chr>=' ')&&(*chr<='~'))//判断是不是非法字符!
  228   1        {
  229   2          OLED_ShowChar(x,y,*chr,size1);
  230   2          x+=size1/2;
  231   2          if(x>128-size1)  //换行
  232   2          {
  233   3            x=0;
  234   3            y+=2;
  235   3          }
  236   2          chr++;
  237   2        }
  238   1      }
  239          
  240          //m^n
  241          u32 OLED_Pow(uint8 m,uint8 n)
  242          {
  243   1        u32 result=1;
  244   1        while(n--)
  245   1        {
  246   2          result*=m;
  247   2        }
  248   1        return result;
  249   1      }
  250          
  251          //显示2个数字
  252          //x,y :起点坐标  
  253          //len :数字的位数
  254          //size:字体大小
  255          void OLED_ShowNum(uint8 x,uint8 y,u32 num,uint8 len,uint8 size1)
C251 COMPILER V5.60.0,  oled                                                               09/06/23  13:14:13  PAGE 5   

  256          {
  257   1        uint8 t,temp;
  258   1        for(t=0;t<len;t++)
  259   1        {
  260   2          temp=(num/OLED_Pow(10,(uint8)(len-t-1)))%10;
  261   2            if(temp==0)
  262   2            {
  263   3              OLED_ShowChar((uint8)(x+(size1/2)*t),y,'0',size1);
  264   3            }
  265   2            else 
  266   2            {
  267   3              OLED_ShowChar((uint8)(x+(size1/2)*t),y,(uint8)(temp+'0'),size1);
  268   3            }
  269   2        }
  270   1      }
  271          
  272          //显示汉字
  273          //x,y:起点坐标
  274          //num:汉字对应的序号
  275          //取模方式 列行式
  276          void OLED_ShowChinese(uint8 x,uint8 y,uint8 num,uint8 size1)
  277          {
  278   1        uint8 i,m,n=0,temp,chr1;
  279   1        uint8 x0=x,y0=y;
  280   1        uint8 size3=size1/8;
  281   1        while(size3--)
  282   1        {
  283   2          chr1=num*size1/8+n;
  284   2          n++;
  285   2            for(i=0;i<size1;i++)
  286   2            {
  287   3              if(size1==16)
  288   3                  {temp=Hzk1[chr1][i];}//调用16*16字体
  289   3              else if(size1==24)
  290   3                  {temp=Hzk2[chr1][i];}//调用24*24字体
  291   3              else if(size1==32)       
  292   3                  {temp=Hzk3[chr1][i];}//调用32*32字体
  293   3              else if(size1==64)
  294   3                  {temp=Hzk4[chr1][i];}//调用64*64字体
  295   3              else return;
  296   3                    
  297   3                  for(m=0;m<8;m++)
  298   3                    {
  299   4                      if(temp&0x01)OLED_DrawPoint(x,y);
  300   4                      else OLED_ClearPoint(x,y);
  301   4                      temp>>=1;
  302   4                      y++;
  303   4                    }
  304   3                    x++;
  305   3                    if((x-x0)==size1)
  306   3                    {x=x0;y0=y0+8;}
  307   3                    y=y0;
  308   3             }
  309   2        }
  310   1      }
  311          
  312          //num 显示汉字的个数
  313          //space 每一遍显示的间隔
  314          void OLED_ScrollDisplay(uint8 num,uint8 space)
  315          {
  316   1        uint8 i,n,t=0,m=0,r;
  317   1        while(1)
  318   1        {
  319   2          if(m==0)
  320   2          {
  321   3            OLED_ShowChinese(128,24,t,16); //写入一个汉字保存在OLED_GRAM[][]数组中
C251 COMPILER V5.60.0,  oled                                                               09/06/23  13:14:13  PAGE 6   

  322   3            t++;
  323   3          }
  324   2          if(t==num)
  325   2            {
  326   3              for(r=0;r<16*space;r++)      //显示间隔
  327   3               {
  328   4                for(i=0;i<144;i++)
  329   4                  {
  330   5                    for(n=0;n<8;n++)
  331   5                    {
  332   6                      OLED_GRAM[i-1][n]=OLED_GRAM[i][n];
  333   6                    }
  334   5                  }
  335   4                 OLED_Refresh();
  336   4               }
  337   3              t=0;
  338   3            }
  339   2          m++;
  340   2          if(m==16){m=0;}
  341   2          for(i=0;i<144;i++)   //实现左移
  342   2          {
  343   3            for(n=0;n<8;n++)
  344   3            {
  345   4              OLED_GRAM[i-1][n]=OLED_GRAM[i][n];
  346   4            }
  347   3          }
  348   2          OLED_Refresh();
  349   2        }
  350   1      }
  351          
  352          //配置写入数据的起始位置
  353          void OLED_WR_BP(uint8 x,uint8 y)
  354          {
  355   1        OLED_WR_Byte((uint8)(0xb0+y),OLED_CMD);//设置行起始地址
  356   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
  357   1        OLED_WR_Byte((x&0x0f),OLED_CMD);
  358   1      }
  359          
  360          //x0,y0：起点坐标
  361          //x1,y1：终点坐标
  362          //BMP[]：要写入的图片数组
  363          void OLED_ShowPicture(uint8 x0,uint8 y0,uint8 x1,uint8 y1,uint8 BMP[])
  364          {
  365   1        u32 j=0;
  366   1        uint8 x=0,y=0;
  367   1        if(y0%(uint8)8==0)
  368   1          y=0;
  369   1        else 
  370   1          y+=1;
  371   1        for(y=y0;y<y1;y++)
  372   1         {
  373   2           OLED_WR_BP(x0,y);
  374   2           for(x=x0;x<x1;x++)
  375   2           {
  376   3             OLED_WR_Byte(BMP[j],OLED_DATA);
  377   3             j++;
  378   3           }
  379   2         }
  380   1      }
  381          //OLED的初始化
  382          void OLED_Init(void)
  383          {
  384   1        
  385   1        spi_init(OLED_SPI_N, OLED_SPI_SCLK_PIN, OLED_SPI_MOSI_PIN, OLED_SPI_MISO_PIN, 3, MASTER, SPI_SYSclk_DIV_
             -4);
  386   1        
C251 COMPILER V5.60.0,  oled                                                               09/06/23  13:14:13  PAGE 7   

  387   1        OLED_RES_Clr();
  388   1        delay_ms(200);
  389   1        OLED_RES_Set();
  390   1        
  391   1        OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
  392   1        OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
  393   1        OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
  394   1        OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
  395   1        OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
  396   1        OLED_WR_Byte(0xCF,OLED_CMD);// Set SEG Output Current Brightness
  397   1        OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
  398   1        OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
  399   1        OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
  400   1        OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
  401   1        OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
  402   1        OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset Shift Mapping RAM Counter (0x00~0x3F)
  403   1        OLED_WR_Byte(0x00,OLED_CMD);//-not offset
  404   1        OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
  405   1        OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
  406   1        OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
  407   1        OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
  408   1        OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
  409   1        OLED_WR_Byte(0x12,OLED_CMD);
  410   1        OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
  411   1        OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
  412   1        OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
  413   1        OLED_WR_Byte(0x02,OLED_CMD);//
  414   1        OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
  415   1        OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
  416   1        OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
  417   1        OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
  418   1        OLED_WR_Byte(0xAF,OLED_CMD);
  419   1        OLED_Clear();
  420   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =     13055     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =      1152         30
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =      1156     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
