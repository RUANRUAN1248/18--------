C251 COMPILER V5.60.0,  zf_adc                                                             09/06/23  13:14:09  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_adc
OBJECT MODULE PLACED IN .\Out_File\zf_adc.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_adc.c XSMALL WARNINGLEVEL(3) BRO
                    -WSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\U
                    -SER\inc;..\USER\src;..\..\..\DIANCI) DEBUG PRINT(.\Out_File\zf_adc.lst) TABS(2) OBJECT(.\Out_File\zf_adc.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          adc
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ790875685)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC32G12K128
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          
   21          #include "zf_adc.h"
   22          #include "intrins.h"
   23          
   24          
   25          //-------------------------------------------------------------------------------------------------------
             -------------
   26          //  @brief      ADC初始化
   27          //  @param      adcn            选择ADC通道
   28          //  @param      speed         ADC时钟频率
   29          //  @return     void
   30          //  Sample usage:               adc_init(ADC_P10,ADC_SYSclk_DIV_2);//初始化P1.0为ADC功能,ADC时钟频率：SYS
             -clk/2
   31          //-------------------------------------------------------------------------------------------------------
             -------------
   32          /*ADC_CHS[3:0] ADC 通道 ADC_CHS[3:0] ADC 通道
   33          0000           P1.0     1000         P0.0
   34          0001           P1.1     1001         P0.1
   35          0010      P1.2/P5.4[1]  1010         P0.2
   36          0011           P1.3     1011         P0.3
   37          0100           P1.4     1100         P0.4
   38          0101           P1.5     1101         P0.5
   39          0110           P1.6     1110         P0.6
   40          0111           P1.7     1111      测试内部 1.19V*/
   41          
   42          void adc_init(ADCN_enum adcn,ADC_SPEED_enum speed)
   43          {
   44   1        ADC_CONTR |= 1<<7;        //1 ：打开 ADC 电源ADC_POWER
   45   1        
   46   1        ADC_CONTR &= (0xF0);      //清除ADC_CHS[3:0] ： ADC 模拟通道选择位
   47   1        ADC_CONTR |= adcn;
   48   1        
   49   1        if((adcn >> 3) == 1) //P0.0
   50   1        {
   51   2          //IO口需要设置为高阻输入
   52   2          P0M0 &= ~(1 << (adcn & 0x07));
C251 COMPILER V5.60.0,  zf_adc                                                             09/06/23  13:14:09  PAGE 2   

   53   2          P0M1 |= (1 << (adcn & 0x07));
   54   2        }
   55   1        else if((adcn >> 3) == 0) //P1.0  
   56   1        {
   57   2          //IO口需要设置为高阻输入
   58   2          P1M0 &= ~(1 << (adcn & 0x07));
   59   2            P1M1 |= (1 << (adcn & 0x07));
   60   2        }
   61   1      
   62   1        ADCCFG |= speed&0x0F;     //ADC时钟频率SYSclk/2/speed&0x0F;
   63   1        
   64   1        ADCCFG |= 1<<5;         //转换结果右对齐。 ADC_RES 保存结果的高 2 位， ADC_RESL 保存结果的低 8 位。
   65   1      } 
   66          
   67          
   68          
   69          //-------------------------------------------------------------------------------------------------------
             -------------
   70          //  @brief      ADC转换一次
   71          //  @param      adcn            选择ADC通道
   72          //  @param      resolution      分辨率
   73          //  @return     void
   74          //  Sample usage:               adc_convert(ADC_P10, ADC_10BIT);
   75          //-------------------------------------------------------------------------------------------------------
             -------------
   76          
   77          uint16 adc_once(ADCN_enum adcn,ADCRES_enum resolution)
   78          {
   79   1        uint16 adc_value; 
   80   1        
   81   1        ADC_CONTR &= (0xF0);        //清除ADC_CHS[3:0] ： ADC 模拟通道选择位
   82   1        ADC_CONTR |= adcn;
   83   1        
   84   1        ADC_CONTR |= 0x40;          // 启动 AD 转换  转换完成后硬件自动将此位清零
   85   1        while (!(ADC_CONTR & 0x20));    // 查询 ADC 完成标志
   86   1        ADC_CONTR &= ~0x20;         // 清完成标志
   87   1        
   88   1                                    //ADC 转换结果寄存器ADC_RES  ADC_RESL
   89   1        adc_value = ADC_RES;        //存储 ADC 的 12 位结果的高 4 位
   90   1        adc_value <<= 8;
   91   1        adc_value |= ADC_RESL;      //存储 ADC 的 12 位结果的低 8 位
   92   1        
   93   1        ADC_RES = 0;
   94   1        ADC_RESL = 0;
   95   1        
   96   1        adc_value >>= resolution;   //取多少位
   97   1        
   98   1      
   99   1        return adc_value;
  100   1      }
  101          
  102          
  103          
  104          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       140     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
C251 COMPILER V5.60.0,  zf_adc                                                             09/06/23  13:14:09  PAGE 3   

  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
